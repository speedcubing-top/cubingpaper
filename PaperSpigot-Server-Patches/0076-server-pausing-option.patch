From bfc9047448840572c5288c511de3372cd51285b7 Mon Sep 17 00:00:00 2001
From: speedcubing <git@speedcubing.top>
Date: Mon, 24 Feb 2025 04:01:21 +0800
Subject: [PATCH] server pausing option


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 5841e9ff..c753a2b3 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -759,8 +759,42 @@ public abstract class MinecraftServer extends dev._2lstudios.flamepaper.tickloop
 
     protected void z() {}
 
+    private int emptyTicks = 0;
     // FlamePaper start - Modern tick loop
     protected void A(java.util.function.BooleanSupplier shouldKeepTicking) throws ExceptionWorldConflict { // CraftBukkit - added throws
+        // CubingPaper start - implement server sleep
+        org.spigotmc.WatchdogThread.tick(); // Spigot
+        int pauseWhenEmptySecondsTicks = top.speedcubing.cubingpaper.CubingPaperConfig.pauseWhenEmptySeconds * 20;
+        if (pauseWhenEmptySecondsTicks > 0) {
+            if (getPlayerList().getPlayerCount() == 0) {
+                ++this.emptyTicks;
+            } else {
+                this.emptyTicks = 0;
+            }
+            if (this.emptyTicks >= pauseWhenEmptySecondsTicks) {
+                if (this.emptyTicks == pauseWhenEmptySecondsTicks) {
+                    LOGGER.info("Server empty for {} seconds, pausing", top.speedcubing.cubingpaper.CubingPaperConfig.pauseWhenEmptySeconds);
+                    SpigotTimings.worldSaveTimer.startTiming(); // Spigot
+                    this.methodProfiler.a("save");
+                    this.v.savePlayers();
+                    server.playerCommandState = true;
+                    for (World world : worlds) {
+                        world.getWorld().save(false);
+                    }
+                    server.playerCommandState = false;
+                    this.methodProfiler.b();
+                    SpigotTimings.worldSaveTimer.stopTiming();
+                }
+
+                this.server.getScheduler().mainThreadHeartbeat();
+
+                // tick connections
+                this.aq().c();
+                ((DedicatedServer) this).aO();
+                return;
+            }
+        }
+        // CubingPaper end
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Spigot
         long i = System.nanoTime();
         isOversleep = true;
@@ -828,7 +862,6 @@ public abstract class MinecraftServer extends dev._2lstudios.flamepaper.tickloop
 
         this.methodProfiler.b();
         this.methodProfiler.b();
-        org.spigotmc.WatchdogThread.tick(); // Spigot
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Spigot
     }
 
@@ -850,7 +883,7 @@ public abstract class MinecraftServer extends dev._2lstudios.flamepaper.tickloop
 
         SpigotTimings.bukkitSchedulerTimer.startTiming(); // Spigot
         // CraftBukkit start
-        this.server.getScheduler().mainThreadHeartbeat(this.ticks);
+        this.server.getScheduler().mainThreadHeartbeat();
         SpigotTimings.bukkitSchedulerTimer.stopTiming(); // Spigot
 
         // Run tasks that are waiting on processing
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index f036709c..8ae0e48c 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -334,8 +334,8 @@ public class CraftScheduler implements BukkitScheduler {
     /**
      * This method is designed to never block or wait for locks; an immediate execution of all current tasks.
      */
-    public void mainThreadHeartbeat(final int currentTick) {
-        this.currentTick = currentTick;
+    public void mainThreadHeartbeat() {
+        ++this.currentTick;
         final List<CraftTask> temp = this.temp;
         parsePending();
         while (isReady(currentTick)) {
diff --git a/src/main/java/top/speedcubing/cubingpaper/CubingPaperConfig.java b/src/main/java/top/speedcubing/cubingpaper/CubingPaperConfig.java
index cc7d1b5a..40fb78a8 100644
--- a/src/main/java/top/speedcubing/cubingpaper/CubingPaperConfig.java
+++ b/src/main/java/top/speedcubing/cubingpaper/CubingPaperConfig.java
@@ -111,4 +111,9 @@ public class CubingPaperConfig {
     private static void disableDefaultWorld() {
         disableDefaultWorld = getBoolean("disableDefaultWorld", false);
     }
+
+    public static int pauseWhenEmptySeconds;
+    private static void pauseWhenEmptySeconds() {
+        pauseWhenEmptySeconds = getInt("pauseWhenEmptySeconds", 60);
+    }
 }
\ No newline at end of file
-- 
2.35.3.windows.1

