From 1b01ba43674729f6637f9b7e0f9f8ed2d5ec468e Mon Sep 17 00:00:00 2001
From: speedcubing <git@speedcubing.top>
Date: Tue, 28 Jan 2025 22:55:11 +0800
Subject: [PATCH] Paper 1.9.4 0157 Avoid blocking on Network Manager creation


diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index f13182c1..7940dadd 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -61,6 +61,17 @@ public class ServerConnection {
     public volatile boolean d;
     private final List<ChannelFuture> g = Collections.synchronizedList(Lists.<ChannelFuture>newArrayList());
     private final List<NetworkManager> h = Collections.synchronizedList(Lists.<NetworkManager>newArrayList());
+    // Paper start - prevent blocking on adding a new network manager while the server is ticking
+    private final List<NetworkManager> pending = Collections.synchronizedList(Lists.<NetworkManager>newArrayList());
+    private void addPending() {
+        synchronized (pending) {
+            synchronized (this.h) { // Paper // OBFHELPER - List of network managers
+                this.h.addAll(pending);
+                pending.clear();
+            }
+        }
+    }
+    // Paper end
 
     public ServerConnection(MinecraftServer minecraftserver) {
         this.f = minecraftserver;
@@ -95,7 +106,7 @@ public class ServerConnection {
                     channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(ServerConnection.this)).addLast("splitter", new PacketSplitter()).addLast("decoder", new PacketDecoder(EnumProtocolDirection.SERVERBOUND)).addLast("prepender", new PacketPrepender()).addLast("encoder", new PacketEncoder(EnumProtocolDirection.CLIENTBOUND));
                     NetworkManager networkmanager = new NetworkManager(EnumProtocolDirection.SERVERBOUND);
 
-                    ServerConnection.this.h.add(networkmanager);
+                    pending.add(networkmanager); // Paper
                     channel.pipeline().addLast("packet_handler", networkmanager);
                     networkmanager.a((PacketListener) (new HandshakeListener(ServerConnection.this.f, networkmanager)));
                 }
@@ -124,6 +135,7 @@ public class ServerConnection {
 
         synchronized (this.h) {
             // Spigot Start
+            addPending(); // Paper
             // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
             if ( org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0 )
             {
-- 
2.35.3.windows.1

