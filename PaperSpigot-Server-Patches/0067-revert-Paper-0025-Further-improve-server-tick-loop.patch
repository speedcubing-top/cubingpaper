From ccfefd426b1f3028a10b56ae5d4d3b37d5568a07 Mon Sep 17 00:00:00 2001
From: speedcubing <git@speedcubing.top>
Date: Fri, 17 Jan 2025 08:26:23 +0800
Subject: [PATCH] revert-Paper-0025-Further-improve-server-tick-loop


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 8d3da09f..5f93d6e5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -111,11 +111,18 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     public org.bukkit.command.ConsoleCommandSender console;
     public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
     public ConsoleReader reader;
-    public static int currentTick = 0; // PaperSpigot - Further improve tick loop
+    public static int currentTick = (int) (System.currentTimeMillis() / 50); // CubingPaper
     public final Thread primaryThread;
     public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
     public int autosavePeriod;
     // CraftBukkit end
+    // CubingPaper
+    // Spigot start
+    private static final int TPS = 20;
+    private static final int TICK_TIME = 1000000000 / TPS;
+    private static final int SAMPLE_INTERVAL = 100;
+    public final double[] recentTps = new double[ 3 ];
+    // Spigot end
 
     public MinecraftServer(OptionSet options, Proxy proxy, File file1) {
         io.netty.util.ResourceLeakDetector.setEnabled( false ); // Spigot - disable
@@ -477,52 +484,10 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         this.isRunning = false;
     }
 
-    // PaperSpigot start - Further improve tick loop
-    private static final int TPS = 20;
-    private static final long SEC_IN_NANO = 1000000000;
-    private static final long TICK_TIME = SEC_IN_NANO / TPS;
-    private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
-    private static final int SAMPLE_INTERVAL = 20;
-    public final RollingAverage tps1 = new RollingAverage(60);
-    public final RollingAverage tps5 = new RollingAverage(60 * 5);
-    public final RollingAverage tps15 = new RollingAverage(60 * 15);
-    public double[] recentTps = new double[ 3 ]; // PaperSpigot - Fine have your darn compat with bad plugins
-
-    public static class RollingAverage {
-        private final int size;
-        private long time;
-        private double total;
-        private int index = 0;
-        private final double[] samples;
-        private final long[] times;
-
-        RollingAverage(int size) {
-            this.size = size;
-            this.time = size * SEC_IN_NANO;
-            this.total = TPS * SEC_IN_NANO * size;
-            this.samples = new double[size];
-            this.times = new long[size];
-            for (int i = 0; i < size; i++) {
-                this.samples[i] = TPS;
-                this.times[i] = SEC_IN_NANO;
-            }
-        }
-
-        public void add(double x, long t) {
-            time -= times[index];
-            total -= samples[index] * times[index];
-            samples[index] = x;
-            times[index] = t;
-            time += t;
-            total += x * t;
-            if (++index == size) {
-                index = 0;
-            }
-        }
-
-        public double getAverage() {
-            return total / time;
-        }
+    // CubingPaper
+    // Spigot Start
+    private static double calcTps(double avg, double exp, double tps) {
+        return (avg * exp) + (tps * (1 - exp));
     }
     // PaperSpigot End
  
@@ -540,42 +505,29 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 // PaperSpigot start - Further improve tick loop
                 Arrays.fill( recentTps, 20 );
                 //long lastTick = System.nanoTime(), catchupTime = 0, curTime, wait, tickSection = lastTick;
-                long start = System.nanoTime(), lastTick = start - TICK_TIME, catchupTime = 0, curTime, wait, tickSection = start;
+                // CubingPaper start
+                long lastTick = System.nanoTime(), catchupTime = 0, curTime, wait, tickSection = lastTick;
                 // PaperSpigot end
                 while (this.isRunning) {
                     curTime = System.nanoTime();
                     // PaperSpigot start - Further improve tick loop
-                    wait = TICK_TIME - (curTime - lastTick);
-                    if (wait > 0) {
-                        if (catchupTime < 2E6) {
-                            wait += Math.abs(catchupTime);
-                        }
-                        if (wait < catchupTime) {
-                            catchupTime -= wait;
-                            wait = 0;
-                        } else if (catchupTime > 2E6) {
-                            wait -= catchupTime;
-                            catchupTime -= catchupTime;
-                        }
-                    }
+                    wait = TICK_TIME - (curTime - lastTick) - catchupTime;
                     if (wait > 0) {
                         Thread.sleep(wait / 1000000);
-                        wait = TICK_TIME - (curTime - lastTick);
+                        catchupTime = 0;
+                        continue;
+                    } else {
+                        catchupTime = Math.min(1000000000, Math.abs(wait));
                     }
 
-                    catchupTime = Math.min(MAX_CATCHUP_BUFFER, catchupTime - wait);
+                    if ( MinecraftServer.currentTick++ % SAMPLE_INTERVAL == 0 )
 
-                    if ( ++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0 )
                     {
-                        final long diff = curTime - tickSection;
-                        double currentTps = 1E9 / diff * SAMPLE_INTERVAL;
-                        tps1.add(currentTps, diff);
-                        tps5.add(currentTps, diff);
-                        tps15.add(currentTps, diff);
-                        // Backwards compat with bad plugins
-                        recentTps[0] = tps1.getAverage();
-                        recentTps[1] = tps5.getAverage();
-                        recentTps[2] = tps15.getAverage();
+                        double currentTps = 1E9 / (curTime - tickSection) * SAMPLE_INTERVAL;
+                        recentTps[0] = calcTps(recentTps[0], 0.92, currentTps); // 1/exp(5sec/1min)
+                        recentTps[1] = calcTps(recentTps[1], 0.9835, currentTps); // 1/exp(5sec/5min)
+                        recentTps[2] = calcTps(recentTps[2], 0.9945, currentTps); // 1/exp(5sec/15min)
+                        // CubingPaper end
                         tickSection = curTime;
                         // PaperSpigot end
                     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9607d5e8..e47d4063 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1778,11 +1778,8 @@ public final class CraftServer implements Server {
         // PaperSpigot start - Add getTPS (Further improve tick loop)
         @Override
         public double[] getTPS() {
-            return new double[] {
-                    MinecraftServer.getServer().tps1.getAverage(),
-                    MinecraftServer.getServer().tps5.getAverage(),
-                    MinecraftServer.getServer().tps15.getAverage()
-            };
+            // CubingPaper - use old recentTps
+            return getServer().recentTps;
         }
         // PaperSpigot end
 
-- 
2.35.1.windows.2

